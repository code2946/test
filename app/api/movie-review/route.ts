export const maxDuration = 30

export async function POST(req: Request) {
  try {
    const { title, stream } = await req.json()

    if (!title || typeof title !== "string") {
      return Response.json({ error: "Valid movie title is required" }, { status: 400 })
    }

    console.log("Generating review for:", title, "Stream:", stream)
    console.log("Using GEMINI_API_KEY:", process.env.GEMINI_API_KEY ? "Present" : "Missing")

    if (!process.env.GEMINI_API_KEY) {
      throw new Error("GEMINI_API_KEY is not configured")
    }

    // Create the review prompt
    const prompt = `You are a professional movie critic. Write a detailed, engaging review for the movie "${title}". 
    
    Structure your review with:
    1. A brief, spoiler-free plot summary
    2. Analysis of acting, direction, and cinematography
    3. What works well and what doesn't
    4. Who would enjoy this movie
    5. A final rating and recommendation
    
    Keep it informative yet entertaining, around 200-300 words. Be honest but fair in your critique.`

    if (stream) {
      // Return streaming response
      return new Response(
        new ReadableStream({
          async start(controller) {
            try {
              // Call Google Gemini API
              const response = await fetch(
                "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent",
                {
                  method: "POST",
                  headers: {
                    "Content-Type": "application/json",
                    "X-goog-api-key": process.env.GEMINI_API_KEY!,
                  },
                  body: JSON.stringify({
                    contents: [
                      {
                        parts: [
                          {
                            text: prompt,
                          },
                        ],
                      },
                    ],
                    generationConfig: {
                      temperature: 0.7,
                      maxOutputTokens: 500,
                    },
                  }),
                }
              )

              if (!response.ok) {
                throw new Error(`Gemini API error: ${response.status} ${response.statusText}`)
              }

              const data = await response.json()
              const review = data.candidates?.[0]?.content?.parts?.[0]?.text

              if (!review) {
                throw new Error("No review generated by Gemini")
              }

              // Simulate streaming by sending text in chunks
              const words = review.split(' ')
              for (let i = 0; i < words.length; i++) {
                const chunk = i === 0 ? words[i] : ' ' + words[i]
                controller.enqueue(new TextEncoder().encode(`data: ${JSON.stringify({ text: chunk })}\n\n`))
                
                // Add a small delay to simulate real-time generation
                await new Promise(resolve => setTimeout(resolve, 50))
              }

              controller.enqueue(new TextEncoder().encode(`data: ${JSON.stringify({ done: true })}\n\n`))
            } catch (error) {
              controller.enqueue(new TextEncoder().encode(`data: ${JSON.stringify({ error: error.message })}\n\n`))
            } finally {
              controller.close()
            }
          },
        }),
        {
          headers: {
            'Content-Type': 'text/event-stream',
            'Cache-Control': 'no-cache',
            'Connection': 'keep-alive',
          },
        }
      )
    } else {
      // Non-streaming response (backward compatibility)
      const response = await fetch(
        "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent",
        {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            "X-goog-api-key": process.env.GEMINI_API_KEY,
          },
          body: JSON.stringify({
            contents: [
              {
                parts: [
                  {
                    text: prompt,
                  },
                ],
              },
            ],
            generationConfig: {
              temperature: 0.7,
              maxOutputTokens: 500,
            },
          }),
        }
      )

      if (!response.ok) {
        throw new Error(`Gemini API error: ${response.status} ${response.statusText}`)
      }

      const data = await response.json()
      const review = data.candidates?.[0]?.content?.parts?.[0]?.text

      if (!review) {
        throw new Error("No review generated by Gemini")
      }

      console.log("Generated review:", review)
      return Response.json({ review })
    }
  } catch (err) {
    console.error("Movie review API error:", err)
    return Response.json(
      {
        error:
          "I couldn't generate a review right now. My AI circuits are a bit scrambled! Please try again in a moment.",
      },
      { status: 500 },
    )
  }
}
